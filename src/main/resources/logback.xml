<!DOCTYPE configuration>
<!--
 [Layout]
 %m : 로그내용이 출력
 %p : trace > debug > info > warn > error 등의 priority 출력
 %r : 어플리케이션이 시작되어 로깅이벤트가 발생하는 시점까지의 경과시간을 밀리세컨드로 출력
 %c : 예) 카테고리가 a.b.c 처럼 되어있다면 %c{2}는 b.c가 출력됩니다.
 %n :  플랫폼 종속적인 개행문자가 출력된다. \r\n 또는 \n 일것이다
 %d : 로깅이벤트가 일어나 날짜 출력 ( 프로그램의 실행속도를 느리게 한다.)
     예) %d{HH:mm:ss} 또는 %d{dd MMMM yyyy HH:mm:ss}
 %C : 호출자의 클래스명 출력
    예) 클래스구조가 org.apache.xyz.SomeClass 처럼 되어있다면 %C{2}는 xyz.SomeClass 가 출력됩니다
 %M : 로깅이 발생한 method 이름을 나타냅니다.
 %F : 로깅이 발생한 프로그램 파일명을 나타냅니다.
 %l : 로깅이 발생한 caller의 정보를 나타냅니다 
 %L : 로깅이 발생한 caller의 라인수를 나타냅니다 
 %x : 로깅이 발생한 thread와 관련된 NDC(nested diagnostic context)를 출력합니다. 
 %X : 로깅이 발생한 thread와 관련된 MDC(mapped diagnostic context)를 출력합니다. 
 %% : % 표시를 출력하기 위해 사용한다.  
 %t : 로그이벤트가 발생된 쓰레드의 이름을 출력합니다
-->
<configuration>
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %class{100}.%M %L - %msg%n</pattern>
    </encoder>
  </appender>
  
  <logger name="com.ssenstone.stonepass">
		<level value="DEBUG" />
  </logger>
	  
  <logger name="org.springframework" additivity="false">
      <level value="WARN" />
      <appender-ref ref="STDOUT" />
  </logger>
  
  <logger name="org.apache.ibatis" additivity="false">
      <level value="WARN" />
      <appender-ref ref="STDOUT" />
  </logger>
  
  <logger name="net.sf.log4jdbc" additivity="false">
      <level value="WARN" />
      <appender-ref ref="STDOUT" />
  </logger>
  
  <logger name="org.apache" additivity="false">
      <level value="ERROR" />
      <appender-ref ref="STDOUT" />
  </logger>
  
  <logger name="jdbc" level="ON"/>
  <logger name="jdbc.sqlonly" level="ON"/>
  <logger name="jdbc.audit" level="OFF"/>
  <logger name="jdbc.resultset" level="OFF"/>
  <logger name="jdbc.resultsettable" level="OFF"/>
  <logger name="jdbc.connection" level="OFF"/>
  
  <root level="DEBUG">
    <appender-ref ref="STDOUT" />
    <appender-ref ref="file" />
  </root>
  
</configuration>
